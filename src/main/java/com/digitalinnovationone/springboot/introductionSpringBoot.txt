Problemas do Spring

Fazer configuração manual, container, dependencias do spring data, configuração de beans via arquivos.xml

Spring Boot

Criado pela Spring Source em 2012. Facilita o setup de projetos de spring.
Ao adicionar uma dependência ele já configura para nós. Entregar mais valor ao cliente.

Spring Boot
Em cima de todos os projetos, resolve problemas de produtividade.
Ferramenta Spring initializer
Maven Project or Gradle
Starters: dependências auto configuráveis pelo Spring Boot.
Execução simplificada: sem deploy em servidor externo.
Configuração: arquivo externo para configuração -> application.properties
Valor: maior tempo em desenvolvimento! entregar mais e em menos tempo.

Exercício:
* Criação do projeto no site: http://start.spring.io

Group
com.digitalinnovationone

Artifact
springboot

* Importar o projeto na IDE.

File > Open > arquivo_descompactado

* Adicionar classe HelloController e o método hello().

* Executar o projeto através do terminal.

executar o projeto através da pasta raiz->mvn spring-boot:run
-----------------------------------------------------------------------------------------------------------------------------------------
Auto Configuration

Tínhamos que configurar o servlet na mão, tínhamos múltiplos arquivos XML.
Configuração manual do Spring MVC: Dispatcher Servlet, web.xml, spring-mvc.xml.
Configuração manual dos beans Spring.
Aplicado também ao Spring Ddata, Spring Security, etc.

spring boot starter data jpa
              -
    spring boot starter -> spring boot autoconfigure
              -
         spring boot

classe configuração deve ser anotada com a anotação @Configuration

Exercícios:
* Adicionar propriedade debug=true no app.properties

* Executar projeto no temrinal e analisar o log.
mvn spring-boot:run

* Identificar e visualizar o auto configuration do spring mvc.
 WebServicesAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.ws.transport.http.MessageDispatcherServlet'
          (OnClassCondition)
@ConditionalOnClass -> DispatcherServlet -> acha o dispatcher, detecta a classe e faz a auto configuração.
External Libraries > Maven: org.springframewrok.boot:spring-boot-autoconfigure > .jar > .autoconfigure
> web > servlet > webMvcAutoConfiguration

* Visualizar a dependência do auto configuration no projeto.
        <dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>

----------------------------------------------------------------------------------------------------------------------------------------
Antes do Spring Boot

° Spring tradicional: war precisa de servidor de aplicação;
° Dependência de um container web ou servidor de aplicação;
° Complexidade para configurações;
° Atualizações frequentes, junto com versão do projeto; (atualização maq linux, windows)
° Gerancimento manual de configurações; (dispatcher servlet, arquivos de configurações de servidores)

FatJar / UberJar

Vantagens:

° Artefato do projeto pronto para execução;
° Container web embutido na geração e execução (Tomcat)
° Deploy embarcado com outros containers são opcionais. (Jet/Undertow)

{{{{{{{{{{{{{{{{{}}}}}}}}}}}}}}}}}}}}
{===================================}
{= App <----------------- Skinny   =}
{= App Dependencies <---- Thin     =}
{===================================}
{=       --------------- Fat/Uber  =}
{===================================}
{=  App Runtime <--------- Hollow  =}
{===================================}
{{{{{{{{{{{{{{{{}}}}}}}}}}}}}}}}}}}}}

Artefato pronto para execução:

° Execução direta através de um único java-jar

mvn package && java -jar target/spring-boot-example-0.1.0.jar

° Podemos também gerar o war tradicional

Create a war file

Exercícios:

° Fazer o build do projeto.
1) Gerar o artefato com package
mvn clean -> para fazer limpeza do nosso projeto (faz todo empacotamento e ageração do nosso artefato)
cd target/ (para entrar na pasta target)
ll (listar conteúdo) mostra o arquivo: nomeJar (não consegui listar com comando ll)
java -jar nomeArquivo.jar (subir a aplicação spring boot) target/spring-boot-example-0.1.0.jar

° Explorar conteúdo do arquivo .jar gerado. (ver as embarcações dentro dele)
dentro da pasta target executar:
jar tf nomeJar | less
Mostra todas as dependências, classes controlodaoras, autoConfiguration, log, etc

° executar o projeto no terminal com java-jar.

° Trocar o formato do artefato para .war e executar no Tomcat.
ir no pom.xml e alterar para a configuração:
    <packaging>war</packaging>
ir no terminal e digitar mvn clean package
C:\Users\wagne\OneDrive\Documentos\Cursos\digitalinnovation.one\introductions-spring\springboot\target\springboot-0.0.1-SNAPSHOT.war

Mover o conteúdo gerado com springboot.war para dentro do apache:
mv target/springboot.war apache-tomcat-9.0.26/webapps (versão que mostra no lista pasta target)(para dentro da pastas webapps

listagem conteudo do web apps
ll apache-tomcat-9.0.26/webapps 9verá o arquivo .war)

Subir tomcat e deixar pronto para execução:
entrar na pasta tomcat:
cd apache-tomcat-9.0.26/
ll
cd bin (pasta responsável pela execução)
startup.sh

agora desta forma conseguimos tb acessar o host através do endereço:

localhost:8080/springboot/

Referências:

https://dzone.com/articles/spring-boot-framework-tutorials

https://www.javaavancado.com/o-que-e-spring-boot/

https://www.tutorialspoint.com/spring_boot/spring_boot_introduction.html

https://docs.spring.io/spring-boot/docs/2.2.0.M5/reference/html/spring-boot-features.html

----------------------------------------------------------------------------------------------------------------------------------------
Importância do uso de Profiles.

Ambientes para desenvolvimento, teste e produção.

Local Development -> Development -> Staging -> Production

Banco de dados para cada ambiente.
Execução de testes unitários em ambiente local.
Suíte de teste completas em ambientes de teste.
Deploy simplificada em produção.


Configurações com arquivos properties.

° Configurações próprias para cada ambiente.

° Ambientes com sua configuração: dev, production.
main> java > resources
application.properties
application-dev.properties
application-release.properties

Parte 2: Configurações com Properties
 Configurado application-prod
 Configurado application-dev a propriedade spring.application.name que toda vez que subir a aplicação será exibida e mensagem contida
 nesta prop.
spring.profiles.active=dev: indica qual é o profile ativo que queremos subir

No terminal digite:
mvn spring-boot:run
Ao subir a aplicação a mensagem aparecerá abaixo:
2020-06-10 11:15:46.238  INFO 46816 --- [main] c.d.springboot.SpringbootApplication:The following profiles are active: dev

Mensagem esperada no brownser:
This is property file fo the Spring Boot Configuration Project specific to DEV Environment